#
# SPDX-License-Identifier: Apache-2.0
#
---
trigger:
  branches:
    include:
      - master
  tags:
    include:
      - "*"

stages:
  - stage: unit_tests
    displayName: Unit tests
    jobs:
      - job: unit_tests
        displayName: Unit tests
        strategy:
          matrix:
            Linux:
              imageName: "ubuntu-latest"
              nodeVersion: "10.x"
            macOS:
              imageName: "macOS-latest"
              nodeVersion: "12.x"
            Windows:
              imageName: "windows-latest"
              nodeVersion: "12.x"
        pool:
          vmImage: $(imageName)
        steps:
          - template: azure-templates/unit-tests.yml
            parameters:
              nodeVersion: $(nodeVersion)
  - stage: integration_tests
    displayName: Integration tests (v2)
    dependsOn: unit_tests
    jobs:
      - job: chaincode_integration_tests
        displayName: Integration tests
        strategy:
          matrix:
            Chaincode_Linux:
              tests: chaincode_tests
              imageName: "ubuntu-latest"
            Contract_Linux:
              tests: contract_tests
              imageName: "ubuntu-latest"
            Private_Contract_Linux:
              tests: private_contract_tests
              imageName: "ubuntu-latest"
            Network_Linux:
              tests: network_test
              imageName: "ubuntu-latest"
        pool:
          vmImage: $(imageName)
        steps:
          - template: azure-templates/integration-tests.yml
            parameters:
              tests: $(tests)
  - stage: v1_integration_tests
    displayName: Integration tests (v1)
    dependsOn: unit_tests
    jobs:
      - job: v1_contract_integration_tests
        displayName: v1 Integration tests
        strategy:
          matrix:
            V1_Contract_Linux:
              tests: contract_tests
              imageName: "ubuntu-latest"
            V1_Private_Contract_Linux:
              tests: private_contract_tests
              imageName: "ubuntu-latest"
        pool:
          vmImage: $(imageName)
        steps:
          - template: azure-templates/v1-integration-tests.yml
            parameters:
              tests: $(tests)
  - stage: publish
    displayName: Publish to npm
    dependsOn: 
      - integration_tests
      - v1_integration_tests
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    jobs:
      - job: publish
        displayName: Publish to npm
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "10.x"
            displayName: Use Node.js 10.x
          - script: npm install --no-optional
            displayName: Install dependencies
          - script: npm install -g npm-cli-login
            displayName: Install npm login tool
          - script: npm-cli-login -u $(NPM_USER) -p $(NPM_PASS) -e $(NPM_EMAIL)
            displayName: Login to npm
          - script: npm publish
            displayName: Publish to npm
  - stage: version_bump
    displayName: Version bump
    dependsOn: publish
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    jobs:
      - job: version_bump
        displayName: Version bump
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              set -ex
              git config --global user.name $(GITHUB_USER_NAME)
              git config --global user.email $(GITHUB_USER_EMAIL)
            displayName: Set GitHub user name and email
          - script: npm version patch --no-git-tag-version
            displayName: Use npm to bump version
          - script: |
              set -ex
              VERSION=$(jq -r ".version" package.json)
              git commit -asm "Automatic version bump to ${VERSION}"
            displayName: Commit version bump
          - script: |
              set -ex
              if [[ $(Build.SourceBranchName) == v1* ]]; then
                export branch_name=master
              else
                export branch_name=v2
              fi

              git -c http.extraheader="Authorization: Basic $(GITHUB_BASIC_AUTH)" push $(Build.Repository.Uri) HEAD:$branch_name -f
            displayName: Push commit to GitHub
